name: RDP-Ubuntu-Tailscale-With-Visible-Creds

on:
  workflow_dispatch:

jobs:
  secure-rdp-ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 3600

    steps:
      - name: Prepare shell
        run: |
          set -euo pipefail
          lsb_release -a || true

      - name: Generate credentials (root + rdpuser) and set on system (VISIBLE)
        id: create_creds
        run: |
          set -euo pipefail

          # Username for RDP user
          RDPUSER="rdpuser"

          # Generate passwords (24 chars each)
          genpw() {
            U=$(tr -dc 'A-Z' </dev/urandom | head -c4)
            L=$(tr -dc 'a-z' </dev/urandom | head -c8)
            N=$(tr -dc '0-9' </dev/urandom | head -c6)
            S=$(tr -dc '!@#$%&*()-_=+[]{}<>?/' </dev/urandom | head -c6)
            RAW="${U}${L}${N}${S}"
            echo "$(echo "$RAW" | fold -w1 | shuf | tr -d '\n')"
          }

          RDP_PASS=$(genpw)
          ROOT_PASS=$(genpw)

          # Ensure rdp user exists and set password
          if id -u "$RDPUSER" >/dev/null 2>&1; then
            echo "User $RDPUSER exists - updating password."
            echo "${RDPUSER}:${RDP_PASS}" | sudo chpasswd
          else
            sudo useradd -m -s /bin/bash "$RDPUSER"
            echo "${RDPUSER}:${RDP_PASS}" | sudo chpasswd
            # give sudo - optional, remove if undesired
            sudo usermod -aG sudo "$RDPUSER"
          fi

          # Unlock and set root password
          echo "Setting root password (enabling root account)..."
          echo "root:${ROOT_PASS}" | sudo chpasswd
          # Ensure root has a valid shell
          sudo usermod -s /bin/bash root || true

          # Export outputs for other steps
          echo "rdpuser=${RDPUSER}" >> "$GITHUB_OUTPUT"
          echo "rdppass=${RDP_PASS}" >> "$GITHUB_OUTPUT"
          echo "rootpass=${ROOT_PASS}" >> "$GITHUB_OUTPUT"

      - name: Install xrdp, Xfce and utilities
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            xrdp xfce4 xfce4-goodies dbus-x11 xorgxrdp iproute2 jq curl ca-certificates ufw
          # Allow anybody to start X (permits root desktop sessions)
          sudo sed -i.bak 's/^allowed_users=.*/allowed_users=anybody/' /etc/X11/Xwrapper.config || true
          # Create .xsession for rdpuser to start xfce
          RDPUSER="${{ steps.create_creds.outputs.rdpuser }}"
          sudo -u "$RDPUSER" bash -c 'echo "startxfce4" > ~/.xsession; chmod 644 ~/.xsession'
          sudo systemctl enable --now xrdp
          sudo systemctl restart xrdp

      - name: Install & start Tailscale (stable) and bring up
        id: tailscale_up
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          set -euo pipefail
          # Add Tailscale repo (uses focal as common path - works on runners)
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu focal main" | sudo tee /etc/apt/sources.list.d/tailscale.list
          sudo apt-get update
          sudo apt-get install -y tailscale

          sudo systemctl enable --now tailscaled

          HOSTNAME="gh-runner-${GITHUB_RUN_ID}"
          sudo tailscale up --authkey="${TAILSCALE_AUTH_KEY}" --hostname="${HOSTNAME}" --accept-routes=false --accept-dns=false || {
            echo "tailscale up failed; printing status for debugging"
            sudo tailscale status || true
            exit 1
          }

          TS_IP=""
          for i in {1..12}; do
            TS_IP=$(sudo tailscale ip -4 || true)
            TS_IP="${TS_IP:-}"
            if [ -n "$TS_IP" ]; then break; fi
            sleep 5
          done

          if [ -z "${TS_IP:-}" ]; then
            echo "ERROR: no tailscale IPv4 assigned"
            exit 1
          fi

          echo "tailscale_ip=${TS_IP}" >> "$GITHUB_OUTPUT"

      - name: Configure UFW to allow RDP only from Tailscale subnet
        run: |
          set -euo pipefail
          sudo ufw --force reset
          sudo ufw default deny incoming
          sudo ufw default allow outgoing
          sudo ufw allow from 100.64.0.0/10 to any port 3389 proto tcp comment 'RDP via Tailscale'
          # Keep SSH allowance optional (runners don't expose SSH)
          echo "y" | sudo ufw enable || true
          sudo ufw status verbose

      - name: Print credentials (VISIBLE) and connection info
        run: |
          set -euo pipefail
          TS_IP="${{ steps.tailscale_up.outputs.tailscale_ip }}"
          echo
          echo "=================== RDP ACCESS (VISIBLE CREDS) ==================="
          echo "Tailscale IP: ${TS_IP}"
          echo "RDP username: ${{ steps.create_creds.outputs.rdpuser }}"
          echo "RDP password: ${{ steps.create_creds.outputs.rdppass }}"
          echo "ROOT username: root"
          echo "ROOT password: ${{ steps.create_creds.outputs.rootpass }}"
          echo "=================================================================="
          echo
          echo "Connect using an RDP client from another device in your Tailnet to the Tailscale IP above."
          echo "Note: root can be used to log in if your client supports it."

      - name: Keep runner alive (main runtime)
        run: |
          set -euo pipefail
          echo "Runner will keep alive; cancel workflow to terminate and run cleanup."
          while true; do
            echo "[$(date -Is)] RDP ready. Cancel workflow to stop and cleanup."
            sleep 300
          done

      - name: Cleanup (always)
        if: ${{ always() }}
        run: |
          set -euo pipefail
          echo "Cleanup: stopping tailscale, removing rdp user, disabling root password, resetting UFW and stopping xrdp..."
          # Bring tailscale down
          sudo tailscale down || true
          sudo systemctl stop tailscaled || true

          # Remove rdpuser and its home (if exists)
          RDPUSER="${{ steps.create_creds.outputs.rdpuser }}"
          if id -u "$RDPUSER" >/dev/null 2>&1; then
            sudo deluser --remove-home "$RDPUSER" || true
            echo "Removed $RDPUSER"
          else
            echo "User $RDPUSER not present"
          fi

          # Lock root again (optional) â€” comment out if you want to keep root enabled
          # sudo passwd -l root || true

          # Reset ufw
          sudo ufw --force reset || true

          # Stop xrdp
          sudo systemctl stop xrdp || true

          echo "Cleanup complete."
