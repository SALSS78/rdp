name: RDP-Ubuntu-Desktop-With-Visible-Password

on:
  workflow_dispatch:

jobs:
  secure-rdp-ubuntu:
    runs-on: ubuntu-latest
    timeout-minutes: 3600

    steps:
      - name: Prepare shell
        run: |
          set -euo pipefail
          echo "Runner: $(uname -a)"
          lsb_release -a || true

      - name: Generate credentials (RDP user) and set on system — password VISIBLE
        id: create_creds
        run: |
          set -euo pipefail

          RDPUSER="rdpuser"

          # Use Python's secrets to create a strong 24-char password (quiet, reliable)
          RDP_PASS=$(python3 - <<'PY'
import secrets, string
chars = string.ascii_letters + string.digits + "!@#$%&*()-_=+[]{}<>?/"
print(''.join(secrets.choice(chars) for _ in range(24)))
PY
)

          # Also create a root password but we will NOT print it
          ROOT_PASS=$(python3 - <<'PY'
import secrets, string
chars = string.ascii_letters + string.digits + "!@#$%&*()-_=+[]{}<>?/"
print(''.join(secrets.choice(chars) for _ in range(24)))
PY
)

          # Create or update the RDP user and set passwords
          if id -u "$RDPUSER" >/dev/null 2>&1; then
            echo "User $RDPUSER exists — updating password."
            echo "${RDPUSER}:${RDP_PASS}" | sudo chpasswd
          else
            sudo useradd -m -s /bin/bash "$RDPUSER"
            echo "${RDPUSER}:${RDP_PASS}" | sudo chpasswd
            # Add to sudo group (optional)
            sudo usermod -aG sudo "$RDPUSER"
          fi

          # Enable/set the root password (we will NOT reveal it)
          echo "root:${ROOT_PASS}" | sudo chpasswd
          sudo usermod -s /bin/bash root || true

          # Output only the password (visible). Username is known (rdpuser).
          echo "rdp_password=${RDP_PASS}" >> "$GITHUB_OUTPUT"
          echo "rdp_user=${RDPUSER}" >> "$GITHUB_OUTPUT"
          # Do not output root password

      - name: Install Xfce desktop + xrdp + utilities
        run: |
          set -euo pipefail
          sudo apt-get update
          # Install a lightweight desktop (Xfce) plus xrdp. If you prefer full Ubuntu Desktop,
          # replace xfce4 with 'ubuntu-desktop' (very large).
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            xfce4 xfce4-goodies xorgxrdp xrdp dbus-x11 iproute2 curl ca-certificates ufw jq

          # Allow anybody to start X (permissive needed for some xrdp configs)
          sudo sed -i.bak 's/^allowed_users=.*/allowed_users=anybody/' /etc/X11/Xwrapper.config || true

          # Create .xsession for rdp user to start xfce
          RDPUSER="${{ steps.create_creds.outputs.rdp_user }}"
          sudo -u "$RDPUSER" bash -lc 'echo "startxfce4" > ~/.xsession && chmod 644 ~/.xsession'

          # Enable and start xrdp service
          sudo systemctl enable --now xrdp
          sudo systemctl restart xrdp
          sudo systemctl status xrdp --no-pager || true

      - name: Install & start Tailscale and bring up
        id: tailscale_up
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          set -euo pipefail
          # Add Tailscale repository (focal path works on runners)
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/focal.gpg | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg >/dev/null
          echo "deb [signed-by=/usr/share/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/ubuntu focal main" | sudo tee /etc/apt/sources.list.d/tailscale.list
          sudo apt-get update
          sudo apt-get install -y tailscale

          sudo systemctl enable --now tailscaled

          HOSTNAME="gh-runner-${GITHUB_RUN_ID}"
          # Bring up tailscale; fail early with status if it fails
          sudo tailscale up --authkey="${TAILSCALE_AUTH_KEY}" --hostname="${HOSTNAME}" --accept-routes=false --accept-dns=false || {
            echo "tailscale up failed; printing status:"
            sudo tailscale status || true
            exit 1
          }

          # Wait for IPv4 to be assigned
          TS_IP=""
          for i in {1..12}; do
            TS_IP=$(sudo tailscale ip -4 || true)
            TS_IP="${TS_IP:-}"
            if [ -n "$TS_IP" ]; then break; fi
            sleep 3
          done

          if [ -z "${TS_IP:-}" ]; then
            echo "ERROR: no tailscale IPv4 assigned"
            exit 1
          fi

          echo "tailscale_ip=${TS_IP}" >> "$GITHUB_OUTPUT"

      - name: Configure UFW to allow RDP only from Tailscale subnet
        run: |
          set -euo pipefail
          sudo ufw --force reset
          sudo ufw default deny incoming
          sudo ufw default allow outgoing
          # Allow RDP only from Tailscale range
          sudo ufw allow from 100.64.0.0/10 to any port 3389 proto tcp comment 'RDP via Tailscale'
          # If you need SSH for debugging, enable it intentionally
          # sudo ufw allow ssh
          echo "y" | sudo ufw enable || true
          sudo ufw status verbose

      - name: Print only the RDP password (VISIBLE) and connection info
        run: |
          set -euo pipefail
          TS_IP="${{ steps.tailscale_up.outputs.tailscale_ip }}"
          RDPUSER="${{ steps.create_creds.outputs.rdp_user }}"
          RDP_PASS="${{ steps.create_creds.outputs.rdp_password }}"

          echo
          echo "================ RDP ACCESS (PASSWORD VISIBLE) ================"
          echo "Tailscale IP: ${TS_IP}"
          echo "RDP username: ${RDPUSER}"
          # This is the only field printed in plaintext per your request:
          echo "RDP password: ${RDP_PASS}"
          echo "================================================================"
          echo "Connect from another tailnet device to the Tailscale IP with an RDP client."
          echo

      - name: Keep runner alive (main runtime)
        run: |
          set -euo pipefail
          echo "Runner will keep alive; cancel the workflow to teardown and run cleanup."
          while true; do
            echo "[$(date -Is)] RDP ready. Cancel workflow to stop and cleanup."
            sleep 300
          done

      - name: Cleanup (always)
        if: ${{ always() }}
        run: |
          set -euo pipefail
          echo "Cleanup: stopping tailscale, removing rdp user, resetting UFW and stopping xrdp..."
          sudo tailscale down || true
          sudo systemctl stop tailscaled || true

          RDPUSER="${{ steps.create_creds.outputs.rdp_user }}"
          if id -u "$RDPUSER" >/dev/null 2>&1; then
            sudo deluser --remove-home "$RDPUSER" || true
            echo "Removed $RDPUSER"
          else
            echo "User $RDPUSER not present"
          fi

          # Optionally lock root again - uncomment to lock:
          # sudo passwd -l root || true

          sudo ufw --force reset || true
          sudo systemctl stop xrdp || true
          echo "Cleanup finished."
